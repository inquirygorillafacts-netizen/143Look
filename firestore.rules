/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where only the designated
 * application owner (identified by their Google ID) has full access to the data.
 *
 * Data Structure:
 * - /reels/{reelId}: Stores reel data (reelNumber, productUrl).  No specific ownership is required for reels.
 * - /reels/{reelId}/analytics_events/{analyticsEventId}: Stores analytics events related to reels.
 * - /owners/{ownerId}: Stores the Google ID of the application owner.  Presence in this collection grants admin access.
 *
 * Key Security Decisions:
 * - The entire Firestore database is secured to only be accessible by a specific Google ID,
 *   which is determined by the existence of a document in the `/owners/{ownerId}` collection.
 * - No user listing is allowed for any collections.
 *
 * Denormalization for Authorization:
 * - The existence of a document in `/owners/{ownerId}` is used as a role for authorization.
 *   This avoids needing to store the owner's role in a separate document or collection,
 *   making the rules simpler and more efficient.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the application.
     * @param {string} ownerId - The owner's user ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId && exists(/databases/$(database)/documents/owners/$(ownerId));
    }

    /**
     * @description Checks if the user is the owner of the application and the resource exists.
     * @param {string} ownerId - The owner's user ID.
     * @return {boolean} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(ownerId) {
      return isOwner(ownerId) && resource != null;
    }

    /**
     * @description Security rules for the /reels/{reelId} collection.
     * @path /reels/{reelId}
     * @allow (get, list): Any user can read the reels.
     * @allow (create, update, delete): Only the application owner can modify reels.
     * @deny create: A non-owner attempts to create a reel.
     * @principle Allows public read access but restricts writes to the application owner.
     */
    match /reels/{reelId} {
      allow get, list: if true;
      allow create: if isOwner(request.auth.uid);
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Security rules for the /reels/{reelId}/analytics_events/{analyticsEventId} collection.
     * @path /reels/{reelId}/analytics_events/{analyticsEventId}
     * @allow (get, list): Any user can read the analytics events.
     * @allow (create, update, delete): Only the application owner can modify analytics events.
     * @deny create: A non-owner attempts to create an analytics event.
     * @principle Allows public read access but restricts writes to the application owner.
     */
    match /reels/{reelId}/analytics_events/{analyticsEventId} {
      allow get, list: if true;
      allow create: if isOwner(request.auth.uid);
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Security rules for the /owners/{ownerId} collection.
     * @path /owners/{ownerId}
     * @allow create: A user can create their own owner document if their auth UID matches the ownerId.
     * @allow get: Only the owner can retrieve their own owner document.
     * @allow list: No one can list the owners collection.
     * @allow update, delete: Only the owner can update or delete their own owner document.
     * @deny create: A non-owner attempts to create an owner document with a mismatched ID.
     * @deny update: A non-owner attempts to update an owner document.
     * @principle Restricts access to the owner's own document in the /owners collection.
     */
    match /owners/{ownerId} {
      allow get: if isOwner(ownerId);
      allow list: if false;
      allow create: if isOwner(ownerId);
      allow update: if isExistingOwner(ownerId);
      allow delete: if isExistingOwner(ownerId);
    }

     match /{path=**}/analytics_events/{document} {
       allow list: if isOwner(request.auth.uid);
     }
  }
}