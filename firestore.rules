/**
 * @fileoverview Firestore Security Rules for the Gorilla Facts application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control (RBAC) model, granting administrative privileges to a designated owner identified by their Google ID.
 * Only the owner, authenticated via Google, can read or modify data.
 *
 * Data Structure:
 * - /reels/{reelId}: Stores reel information (reelNumber, productUrl).
 * - /reels/{reelId}/analytics_events/{analyticsEventId}: Stores analytics events associated with each reel.
 * - /owners/{ownerId}: Stores the Google ID of the application owner. Existence of a document in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - Strict owner-only access: No public data or user-generated content is permitted.
 * - Owner role is determined by presence in the `/owners` collection.
 * - No user listing is allowed for the `/owners` collection.
 * - Data type and schema validation are relaxed for prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @return {boolean} True if the user is signed in; otherwise, false.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the application owner.
     * The owner is determined by the existence of a document in the `/owners` collection
     * where the document ID matches the authenticated user's UID.
     * @param {string} ownerId - The ID of the owner to check against.
     * @return {boolean} True if the user is the owner; otherwise, false.
     */
    function isOwner(ownerId) {
      return isSignedIn() && exists(/databases/$(database)/documents/owners/$(ownerId));
    }

    /**
     * @description Checks if the requesting user is the application owner and that the resource exists.
     * @param {string} ownerId - The ID of the owner to check against.
     * @return {boolean} True if the user is the owner and the resource exists; otherwise, false.
     */
    function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
    }

    /**
     * @description Security rules for the /reels collection.
     * @path /reels/{reelId}
     * @allow (create, update, delete) if isOwner(request.auth.uid) - Allows the owner to create, update and delete reels.
     * @allow (get, list) if isOwner(request.auth.uid) - Allows the owner to read and list reels.
     * @deny (create) if request.auth == null - Denies unauthenticated users from creating reels.
     * @deny (update, delete) if !isExistingOwner(request.auth.uid) - Denies non-owners from updating or deleting reels.
     * @principle Enforces owner-only access for all operations on reels.
     */
    match /reels/{reelId} {
      allow get: if isOwner(request.auth.uid);
      allow list: if isOwner(request.auth.uid);
      allow create: if isOwner(request.auth.uid);
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Security rules for the /reels/{reelId}/analytics_events collection.
     * @path /reels/{reelId}/analytics_events/{analyticsEventId}
     * @allow (create, update, delete) if isOwner(request.auth.uid) - Allows the owner to create, update and delete analytics events.
     * @allow (get, list) if isOwner(request.auth.uid) - Allows the owner to read and list analytics events.
     * @deny (create) if request.auth == null - Denies unauthenticated users from creating analytics events.
     * @deny (update, delete) if !isExistingOwner(request.auth.uid) - Denies non-owners from updating or deleting analytics events.
     * @principle Enforces owner-only access for all operations on analytics events.
     */
    match /reels/{reelId}/analytics_events/{analyticsEventId} {
      allow get: if isOwner(request.auth.uid);
      allow list: if isOwner(request.auth.uid);
      allow create: if isOwner(request.auth.uid);
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Security rules for the /owners collection.
     * @path /owners/{ownerId}
     * @allow create: if request.auth.uid == ownerId; - Allows a user to create their own owner document.
     * @allow get: if isOwner(request.auth.uid); - Allows the owner to read owner documents.
     * @deny list: if true; -  Denies anyone from listing the owner documents.
     * @allow update: if isExistingOwner(request.auth.uid); - Allows the owner to update owner documents.
     * @allow delete: if isExistingOwner(request.auth.uid); - Allows the owner to delete owner documents.
     * @deny create: if request.auth == null; -  Denies unauthenticated users from creating owner documents.
     * @deny update, delete: if !isExistingOwner(request.auth.uid); - Denies non-owners from updating or deleting owner documents.
     * @principle Enforces strict owner-only access, preventing unauthorized modifications.
     */
    match /owners/{ownerId} {
      allow get: if isOwner(ownerId);
      allow list: if false;
      allow create: if request.auth.uid == ownerId;
      allow update: if isExistingOwner(ownerId);
      allow delete: if isExistingOwner(ownerId);
    }
  }
}