/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict owner-only access model, granting full control to the application owner (based on their Google ID).
 *
 * Data Structure:
 * - /reels/{reelId}: Stores reel data (reelNumber, productUrl). Accessible only by the application owner.
 * - /reels/{reelId}/analytics_events/{analyticsEventId}: Stores analytics events for a specific reel. Accessible only by the application owner.
 * - /owners/{ownerId}: Stores the owner's Google ID. Existence of a document here grants admin access.
 *
 * Key Security Decisions:
 * - Only authenticated users with a matching entry in the `/owners` collection can read or write data.
 * - No public listing of reels or analytics events is allowed.
 * - The rule set focuses on authorization and does not validate the data types or presence of optional fields, allowing for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The `owners` collection is used to quickly verify the user's role based on the authenticated Google ID, avoiding complex queries.
 *
 * Structural Segregation:
 * - Data is segregated based on ownership and access needs. Only the owner can access and modify the data, while analytics events are nested under each reel.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner based on their UID.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the existing owner and the resource exists.
     *              This function combines the ownership check with the existence check for destructive operations.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /reels collection.
     * @path /reels/{reelId}
     * @allow (create) If the user is the owner and creates a new reel.
     * @allow (update) If the user is the owner and updates an existing reel.
     * @allow (delete) If the user is the owner and deletes an existing reel.
     * @deny (create) If the user is not the owner.
     * @deny (update) If the user is not the owner.
     * @deny (delete) If the user is not the owner.
     * @principle Enforces owner-only access for creating, updating, and deleting reels.
     */
    match /reels/{reelId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/owners/$(request.auth.uid));
      allow list: if false; // No public listing of reels.
      allow create: if isSignedIn() && exists(/databases/$(database)/documents/owners/$(request.auth.uid));
      allow update: if isSignedIn() && exists(/databases/$(database)/documents/owners/$(request.auth.uid)) && resource != null;
      allow delete: if isSignedIn() && exists(/databases/$(database)/documents/owners/$(request.auth.uid)) && resource != null;
    }

    /**
     * @description Rules for the /reels/{reelId}/analytics_events collection.
     * @path /reels/{reelId}/analytics_events/{analyticsEventId}
     * @allow (create) If the user is the owner and creates a new analytics event.
     * @allow (update) If the user is the owner and updates an existing analytics event.
     * @allow (delete) If the user is the owner and deletes an existing analytics event.
     * @deny (create) If the user is not the owner.
     * @deny (update) If the user is not the owner.
     * @deny (delete) If the user is not the owner.
     * @principle Enforces owner-only access for creating, updating, and deleting analytics events.
     */
    match /reels/{reelId}/analytics_events/{analyticsEventId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/owners/$(request.auth.uid));
      allow list: if false; // No public listing of analytics events.
      allow create: if isSignedIn() && exists(/databases/$(database)/documents/owners/$(request.auth.uid));
      allow update: if isSignedIn() && exists(/databases/$(database)/documents/owners/$(request.auth.uid)) && resource != null;
      allow delete: if isSignedIn() && exists(/databases/$(database)/documents/owners/$(request.auth.uid)) && resource != null;
    }

    /**
     * @description Rules for the /owners collection.
     * @path /owners/{ownerId}
     * @allow (create) If the user's UID matches the ownerId, they are signed in, and the Google ID exists.
     * @deny (create) If the user's UID does not match the ownerId.
     * @allow (get) If the user is signed in and trying to get their own owner document.
     * @allow (update) Only the owner can update their own document.
     * @allow (delete) Only the owner can delete their own document.
     * @principle Enforces that only the authenticated user can create their own owner document, and no one else can modify it.
     */
    match /owners/{ownerId} {
      allow get: if isOwner(ownerId);
      allow list: if false; // No listing of owners.
      allow create: if isOwner(ownerId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(ownerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(ownerId);
    }
  }
}