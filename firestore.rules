/**
 * @fileOverview Firestore Security Rules for Gorilla Facts
 *
 * @description This ruleset enforces a role-based access control mechanism, granting access only to the designated owner, identified by their Google ID. It prioritizes simplicity and security by denormalizing authorization data (owner status) and structurally segregating data based on access requirements.
 *
 * @dataStructure
 *   - /reels/{reelId}: Stores reel and product URL data.
 *   - /reels/{reelId}/analytics_events/{analyticsEventId}: Stores analytics events related to a specific reel.
 *   - /owners/{ownerId}: Stores information about the application's owner, specifically their Google ID. Existence in this collection grants admin access.
 *
 * @keySecurityDecisions
 *   - Access to all data is restricted to the owner of the application, identified by their Google ID stored in the `/owners` collection.
 *   - No public read access is granted to any data.
 *   - List operations on collections are only allowed for the owner.
 *   - Data validation is relaxed in favor of rapid prototyping, focusing on authorization and relationship integrity.
 *
 * @denormalizationForAuthorization
 *   - The existence of a document in `/owners/{ownerId}` implicitly grants administrative access.
 *
 * @structuralSegregation
 *   - Analytics events are stored in a subcollection under each reel, allowing for efficient querying of analytics data related to specific reels while keeping a single owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the application.
     * @param {string} ownerId The owner ID to check against the request's authentication UID.
     * @return {boolean} True if the requesting user is the owner, false otherwise.
     */
    function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId && exists(/databases/$(database)/documents/owners/$(ownerId));
    }

    /**
     * @description Checks if the requesting user is the existing owner of the application.
     * @param {string} ownerId The owner ID to check against the request's authentication UID.
     * @return {boolean} True if the requesting user is the existing owner, false otherwise.
     */
    function isExistingOwner(ownerId) {
      return isOwner(ownerId) && resource != null;
    }


    /**
     * @description Rules for the /reels/{reelId} collection.
     * @path /reels/{reelId}
     * @allow (read) If the user is the owner, they can read any reel.
     * @allow (create) If the user is the owner, they can create reels.
     * @deny (read) If the user is not the owner, they cannot read any reels.
     * @deny (create) If the user is not the owner, they cannot create reels.
     * @principle Enforces owner-only access for reels.
     */
    match /reels/{reelId} {
      allow get: if isSignedIn() && isOwner(request.auth.uid);
      allow list: if isSignedIn() && isOwner(request.auth.uid);

      allow create: if isSignedIn() && isOwner(request.auth.uid);
      allow update: if isSignedIn() && isOwner(request.auth.uid);
      allow delete: if isSignedIn() && isOwner(request.auth.uid);
    }

    /**
     * @description Rules for the /reels/{reelId}/analytics_events/{analyticsEventId} collection.
     * @path /reels/{reelId}/analytics_events/{analyticsEventId}
     * @allow (read) If the user is the owner, they can read any analytics event.
     * @allow (create) If the user is the owner, they can create analytics events.
     * @deny (read) If the user is not the owner, they cannot read any analytics events.
     * @deny (create) If the user is not the owner, they cannot create analytics events.
     * @principle Enforces owner-only access for analytics events.
     */
    match /reels/{reelId}/analytics_events/{analyticsEventId} {
      allow get: if isSignedIn() && isOwner(request.auth.uid);
      allow list: if isSignedIn() && isOwner(request.auth.uid);

      allow create: if isSignedIn() && isOwner(request.auth.uid);
      allow update: if isSignedIn() && isOwner(request.auth.uid);
      allow delete: if isSignedIn() && isOwner(request.auth.uid);
    }

    /**
     * @description Rules for the /owners/{ownerId} collection.
     * @path /owners/{ownerId}
     * @allow (create) Allows the user to create their owner document if their auth UID matches the document ID.
     * @allow (read) If the user is the owner, they can read their owner document.
     * @deny (create) If the user is not signed in, they cannot create an owner document.
     * @deny (read) If the user is not signed in, they cannot read the owner document.
     * @principle Enforces owner-only access for owner documents and restricts creation to authenticated users.
     */
    match /owners/{ownerId} {
        allow get: if isSignedIn() && isOwner(ownerId);
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == ownerId;
        allow update: if isSignedIn() && isOwner(ownerId);
        allow delete: if isSignedIn() && isOwner(ownerId);
    }
  }
}